# Allow importing of this package
dashboard_import:
  package_import_url: "github://Marsupilami23/myesphometemplates/kauf-plf12-plug/standard/diagnostics.yaml@main"
  import_full_config: false

# https://esphome.io/components/sensor/index.html
sensor:   # Power monitoring sensors output to Home Assistant
    # https://esphome.io/components/sensor/hlw8012.html
  - platform: kauf_hlw8012
    id: hlw_main
    sel_pin:
      number: $sub_pm_sel_pin
      inverted: True
    cf_pin: $sub_pm_cf_pin
    cf1_pin: $sub_pm_cf1_pin
    current_resistor: $current_resistor_val
    voltage_divider: $voltage_divider_val
    update_interval: $sub_update_interval
    timeout:                         $sub_hlw_timeout
    early_publish_percent:           $sub_early_publish_percent
    early_publish_percent_min_power: $sub_early_publish_percent_min_power
    early_publish_absolute:          $sub_early_publish_absolute
    model: $sub_hlw_model
    power:
      name: $device_name Power
      unit_of_measurement: W
      id: wattage
      filters:
        - calibrate_linear:
            - $power_cal_val1_in -> $power_cal_val1_out
            - $power_cal_val2_in -> $power_cal_val2_out
        - lambda: |-
              // filter out extremely large values that are incorrect
              float return_val = x * id(scale_power).state/100.0f;
              if ( return_val > 5000.0f) return {};
              else return return_val;
      on_value:   # set or clear in_use template binary sensor depending on whether power usage is over threshold
        - lambda: id(in_use).publish_state(x >= id(threshold).state);
    current:
      name: $device_name Current
      unit_of_measurement: A
      id: current
      filters:
        - calibrate_linear:
            - $current_cal_val1_in -> $current_cal_val1_out
            - $current_cal_val2_in -> $current_cal_val2_out
        - lambda: return x * id(scale_current).state/100.0f;
    voltage:
      name: $device_name Voltage
      unit_of_measurement: V
      id: voltage
      filters:
        - calibrate_linear:
            - $voltage_cal_val1_in -> $voltage_cal_val1_out
            - $voltage_cal_val2_in -> $voltage_cal_val2_out
        - lambda: return x * id(scale_voltage).state/100.0f;

    # Reports the total Power so-far each day, resets at midnight
    # https://esphome.io/components/sensor/total_daily_energy.html
  - platform: total_daily_energy
    name: $device_name Total Daily Energy
    power_id: wattage
    filters:
        - multiply: 0.001  ## convert Wh to kWh
    unit_of_measurement: kWh
    forced_hash: 1903527169
    forced_addr: 6
    global_addr: global_forced_addr

    # https://esphome.io/components/sensor/uptime.html
  - platform: uptime
    name: $device_name Uptime
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: $disable_entities

    # https://esphome.io/components/sensor/template.html
  - platform: template
    name: $device_name Button Press Duration
    id: sensor_press_duration
    entity_category: diagnostic
    disabled_by_default: $disable_entities
    unit_of_measurement: ms
    icon: mdi:timer-outline

# clock input from Home Assistant used to calculate total daily energy
# https://esphome.io/components/time.html#home-assistant-time-source
time:
  - platform: homeassistant
    id: homeassistant_time

# Send IP Address to HA
# https://esphome.io/components/text_sensor/wifi_info.html
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${device_name} IP Address"
      disabled_by_default: $disable_entities

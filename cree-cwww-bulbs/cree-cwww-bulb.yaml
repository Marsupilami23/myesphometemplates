substitutions:
  name: cree-cwww-bulb
  friendly_name: CREE Cool Warm White Bulb
  api_key: "p/7VN1Hg7kEddqsPhU5qKg0/oLYYL036K0cgyVX9nBU="
  disable_entities: "true"
  disable_webserver: "false"
  wifi_ap_timeout: 2min
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  project_name: CREE.CWWW
  project_ver_num: "1.0"
  project_ver_let: a

  sub_on_turn_on: script_do_nothing
  sub_on_turn_off: script_do_nothing

  sub_cw_pin: GPIO26
  sub_ww_pin: GPIO24

  sub_warm_white_temp: 2800 Kelvin
  sub_cold_white_temp: 6600 Kelvin

  sub_cw_freq: 400hz
  sub_ww_freq: 400hz

  sub_reboot_req: '9'
  sub_ota_num_attempts: '15'

  sub_max_power: '0.8'
  sub_default_transition_length: 250ms
  sub_api_reboot_timeout: 0s
  light_restore_mode: RESTORE_DEFAULT_ON

bk72xx:
  board: wblc5
  family: bk7231t

globals:
  - id: global_forced_addr
    type: int
    restore_value: no
    initial_value: '12345'
  - id: global_quick_boot_count
    type: int
    restore_value: yes
    initial_value: '0'

esphome:
  name: $name
  project:
    name: $project_name
    version: $project_ver_num($project_ver_let)
  on_boot:
    then:
      - script.execute: script_quick_boot
  min_version: 2024.10.0

button:
  - platform: restart
    id: restart_button
    name: $friendly_name Restart Firmware
    entity_category: diagnostic
    disabled_by_default: $disable_entities

wifi:
  ssid: $wifi_ssid
  password: $wifi_password
  ap:
    ap_timeout: $wifi_ap_timeout
    ssid: "${name}-setup"
    password: $wifi_password

captive_portal:

logger:

mdns:

web_server:

api:
  id: cree_api
  reboot_timeout: "${sub_api_reboot_timeout}"
  encryption:
    key: "${api_key}"

ota:
  - platform: esphome
    id: my_ota
    password: "${ota_password}"
    on_error:
      then:
        - button.press: restart_button

safe_mode:
  num_attempts: "${sub_ota_num_attempts}"

text_sensor:
  - platform: libretiny
    version:
      name: LibreTiny Version
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address
      entity_category: diagnostic
      disabled_by_default: "${disable_entities}"


output:
  - platform: libretiny_pwm
    id: pwm_cw
    pin: $sub_cw_pin
  - platform: libretiny_pwm
    id: pwm_ww
    pin: $sub_ww_pin

light:
  - platform: cwww
    id: cwww_light
    default_transition_length: "${sub_default_transition_length}"
    name: "${friendly_name}"
    warm_white: pwm_ww
    cold_white: pwm_cw
    warm_white_color_temperature: "${sub_warm_white_temp}"
    cold_white_color_temperature: "${sub_cold_white_temp}"
    restore_mode: "${light_restore_mode}"
    on_turn_on:
      - script.execute: "${sub_on_turn_on}"
    on_turn_off:
      - script.execute: "${sub_on_turn_off}"

sensor:
  - platform: uptime
    name: $friendly_name Uptime
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: "${disable_entities}"

script:
  - id: script_save_changes
    mode: restart
    then:
      - delay: 3s
      - lambda: global_preferences->sync();

  - id: script_do_nothing
    then:
      lambda: return;

    # increment global_quick_boot_count if bulb stays on less than 10 seconds or never connects to wifi
    # reset wifi credentials if the counter gets to $sub_reboot_req
  - id: script_quick_boot
    then:

      # if quick boot count is $sub_reboot_req, overwrite wifi credentials to force AP
      - if:
          condition:
            lambda: return ( id(global_quick_boot_count) >= $sub_reboot_req );
          then:

            - lambda: |-
                ESP_LOGD("cree-cwww-bulb.yaml", "quick boot count variable is now $sub_reboot_req, overwriting credentials and rebooting");

                // turn on red light
                auto call = id(cwww_light).turn_on();
                call.set_brightness(0.6);
                call.set_rgb(1.0, 0.0, 0.0);
                call.set_save(false);
                call.perform();

                // reset counter and immediately save
                id(global_quick_boot_count) = 0;
                global_quick_boot_count->loop();
                global_preferences->sync();

            # short delay
            - delay: 5s
      # increment quick boot counter so it will stay incremented if device reboots
      - lambda: |-
          ESP_LOGD("cree-cwww-bulb.yaml", "quick boot count variable is now %d.  Need $sub_reboot_req to overwrite credentials", id(global_quick_boot_count));
          id(global_quick_boot_count) += 1;
          global_quick_boot_count->loop();
          global_preferences->sync();

      # if quick boot count gets over 1 (don't flash on first occurance in case it's an accident), flash light to indicate we are in process
      - if:
          condition:
            lambda: return ( id(global_quick_boot_count) > 2 );
          then:
            - lambda: |-
                auto call = id(cwww_light).turn_on();
                call.set_brightness(0.5);
                call.set_rgb(1.0, 1.0, 0.0);
                call.set_save(false);
                call.perform();


      # wait 10 seconds
      - delay: 10s
      - lambda: ESP_LOGD("cree-cwww-bulb.yaml", "quick boot script, 10 seconds up");

      # any time boot is greater than 10 seconds and also connects to wifi, reset quick boot count to 0
      - lambda: |-
          id(global_quick_boot_count) = 0;
          global_quick_boot_count->loop();
          global_preferences->sync();

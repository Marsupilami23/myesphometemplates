sensor:
  - platform: adc
    pin: $sub_batt_lvl_gpio
    id: "VCC"
    name: "Battery Voltage"
    filters:
      - multiply: 2.4
      - clamp:
          min_value: 0.0
          max_value: 3.0
          ignore_out_of_range: true
    on_value:
      then:
        - component.update: battery_level
        - logger.log:
            format: "Received VCC: %s"
            args: ['id(VCC).state']
        - mqtt.publish:
            topic: homeassistant/${device_code}/sensor/battery_voltage/state
            payload: !lambda |
              char voltage_str[5];
              snprintf(voltage_str, sizeof(voltage_str), "%.2f", id(VCC).state);
              return std::string(voltage_str);
    entity_category: diagnostic
    icon: mdi:battery

  - platform: template
    name: "Battery Level (%)"
    unit_of_measurement: '%'
    update_interval: 300s
    id: battery_level
    lambda: |-
      return ((id(VCC).state /3.0) * 100.00);
    on_value:
      then:
        - mqtt.publish:
            topic: homeassistant/${device_code}/sensor/battery_level/state
            payload: !lambda |
              char battery_str[5];
              snprintf(battery_str, sizeof(battery_str), "%.0f", id(battery_level).state);
              return std::string(battery_str);
    entity_category: diagnostic
    icon: mdi:battery

  - platform: template
    name: first_connect_ms
    id: first_connect_ms
    entity_category: diagnostic
    lambda: |-
      return id(first_connect_ms_int);

  - platform: internal_temperature
    name: Internal Temperature
    icon: mdi:thermometer

  - platform: template
    id: door_timestamp
    name: "Door Timestamp"
    lambda: |-
      return id(mqtt_door_timestamp).state;
    update_interval: never

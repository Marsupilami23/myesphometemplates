script:
  - id: script_deep_sleep
    then:
      - deep_sleep_libretiny.prevent
      - mqtt.publish:
          topic: homeassistant/${device_code}/binary_sensor/door
          payload: !lambda |
            if (id(door).state {
              return "OPEN";
            } else {
              return "CLOSED";
            }
            
      - mqtt.publish:
          topic: homeassistant/${device_code}/binary_sensor/bottom_button
          payload: !lambda |
            if (id(bottom_button).state) {
              return "PRESSED";
            } else {
              return "RELEASED";
            }
            
      - mqtt.publish:
          topic: homeassistant/${device_code}/sensor/battery_capacity
          payload: !lambda |
            return String(id(VCC).state);

      - mqtt.publish:
          topic: homeassistant/${device_code}/sensor/battery_percent
          return String(id(battery_percent).state);

     - mqtt.publish:
          topic: homeassistant/${device_code}/current_time/timestamp
          payload: !lambda |
            time_t now = id(homeassistant_time).now().timestamp; // Get timestamp from Home Assistant Time
            char timestamp_str[20]; // Buffer for the timestamp string
            strftime(timestamp_str, sizeof(timestamp_str), "%Y-%m-%d %H:%M:%S", localtime(&now)); // Format the timestamp
            return String(timestamp_str);

      - delay: 5s
      - script.execute: script_check_deep_sleep
    mode: restart

  - id: script_check_deep_sleep
    then:
      - deep_sleep_libretiny.prevent
      - if:
          condition:
            - switch.is_off: manual_mode
          then:
            - output.turn_off: activity_led_output
            - delay: 1s
            - deep_sleep_libretiny.allow
    mode: restart

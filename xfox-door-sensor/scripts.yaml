script:
  - id: script_deep_sleep
    then:
      - deep_sleep_libretiny.prevent
      - mqtt.publish:
          topic: homeassistant/${device_code}/binary_sensor/door/state
          payload: !lambda |
            if (id(door).state) {
              return "OPEN";
            } else {
              return "CLOSED";
            }
      - mqtt.publish:
          topic: homeassistant/${device_code}/sensor/battery_voltage/state
          payload: !lambda |
            char voltage_str[5];
            snprintf(voltage_str, sizeof(voltage_str), "%.2f", id(VCC).state);
            return std::string(voltage_str);
      - mqtt.publish:
          topic: homeassistant/${device_code}/sensor/battery_level/state
          payload: !lambda |
            char battery_str[5];
            snprintf(battery_str, sizeof(battery_str), "%.0f", id(battery_level).state);
            return std::string(battery_str);
      - component.update: homeassistant_time
      - mqtt.publish:
          topic: homeassistant/${device_code}/sensor/current_time
          payload: !lambda |
            time_t currTime = id(homeassistant_time).now().timestamp;
            char current_time_str[17];
            strftime(current_time_str, sizeof(current_time_str), "%Y-%m-%d %H:%M", localtime(&currTime));
            return std::string(current_time_str);
      
      - delay: 5s
      - script.execute: script_check_deep_sleep
    mode: restart

  - id: script_check_deep_sleep
    then:
      - deep_sleep_libretiny.prevent
      - if:
          condition:
            - switch.is_off: manual_mode
          then:
            - output.turn_off: activity_led_output
            - delay: 1s
            - deep_sleep_libretiny.allow
    mode: restart

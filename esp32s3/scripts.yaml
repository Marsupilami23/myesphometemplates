esphome:
  includes:
    - json.h
    - http.h
    
script:
  - id: get_burn_status
    then:
      - lambda: |-
          // Define the URL
          const char* url = "https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt";

          // Create an HTTP client
          esphome::http::HTTPClient http_client;

          // Make the HTTP GET request
          auto error = http_client.begin(url);
          if (error) {
            ESP_LOGW("burn_check", "Error initializing HTTP client: %s", error.message());
            return 0; // Return 0 to indicate an error
          }

          int http_code = http_client.GET();
          if (http_code > 0) {
            if (http_code == HTTP_CODE_OK) {
              // Get the response body
              std::string response_body = http_client.getString();

              // Preprocess the response to extract valid JSON
              std::string json_data = response_body \
                .replace("burncheckForecastCallback(", "") \
                .replace(");", "") \
                .replace("(", "") \
                .replace(")", "");

              // Parse the JSON data using the json component
              auto parsed_json = json::parse_json(json_data); 
              if (parsed_json.has_value()) {
                auto data = parsed_json.value();
                if (data.is_object()) {
                  auto burn_forecast = data["burn_forecast"];
                  if (burn_forecast.is_object()) {
                    auto today = burn_forecast["today"];
                    if (today.is_object()) {
                      auto category = today["category"];
                      if (category.is_number()) {
                        // Update the global variable with the category number
                        id(burn_status_category) = (int)category.as_double();
                        return id(burn_status_category);
                      }
                    }
                  }
                }
              } else {
                ESP_LOGW("burn_check", "Error parsing JSON: %s", parsed_json.error().message());
              }
            } else {
              ESP_LOGW("burn_check", "Error fetching data: HTTP code %d", http_code);
            }
          } else {
            ESP_LOGW("burn_check", "Error fetching data: %s", http_client.errorToString(http_code));
          }

          return 0; // Return 0 to indicate an error

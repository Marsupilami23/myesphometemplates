substitutions:
  # WIFI Substitutions
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  sub_ota_num_attempts: "15"

sensor:
  - platform: wifi_signal
    name: "RSSI"
    id: sensor_rssi
    update_interval: 60s
    entity_category: "diagnostic"

api:

# Enable OTA
ota:
  - platform: esphome
    id: my_ota
    password: "${ota_password}"
    on_error:
      then:
        - button.press: button_restart
safe_mode:
  num_attempts: "${sub_ota_num_attempts}"
  
# Enable WIFI and AP for capitve portal
wifi:
  id: wifi_brg95758
  fast_connect: false
  power_save_mode: none
  ssid: "${wifi_ssid}"
  password: "${wifi_password}"
  ap:
    ssid: "${sub_name}-setup"
    password: "${wifi_password}"
  on_connect:
    then:
      - http_request.get:
          id: burn_check_request
          url: https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt
          capture_response: true
          on_response:
            then:
              - if:
                  condition:
                    lambda: return response->status_code == 200;
                  then:
                    - logger.log:
                        format: "Raw Response %s"
                        args: [body.c_str()]
                    - lambda: |-
                        // Remove "burncheckForecastCallback(" and ")" from the response
                        std::string cleaned_body = body;
                        cleaned_body = cleaned_body.erase(0, strlen("burncheckForecastCallback("));
                        cleaned_body = cleaned_body.erase(cleaned_body.size() - 1);
                        
                        json::parse_json(cleaned_body, [](JsonObject root) -> bool {
                          if (root.containsKey("burn_forecast") &&
                              root["burn_forecast"].containsKey("today") &&
                              root["burn_forecast"]["today"].containsKey("category") &&
                              root["burn_forecast"]["today"]["category"].is<int>()) {
                              
                             id(burn_category) = (root["burn_forecast"]["today"]["category"].as<int>());
                             id(burn_category).publish_state(burn_status_sensor);
                             return true;
                          } else {
                            ESP_LOGD("burn_category", "No burn status found!");
                            return false;
                          }
                          });
                        // Putting to deep sleep
                        id(deep_sleep_1).allow_deep_sleep();
web_server:
  version: 3
  include_internal: true
  ota: true

captive_portal:

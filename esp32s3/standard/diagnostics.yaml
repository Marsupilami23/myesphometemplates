substitutions:
  log_level: DEBUG

globals:
  - id: burn_category
    type: int
    restore_value: true
    
# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: 115200
  
http_request:
  id: burn_check_request
  verify_ssl: false

time:
  - platform: homeassistant
    id: homeassistant_time

deep_sleep:
  id: deep_sleep_1

binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

  - platform: gpio
    id: test_button
    name: Test Button
    pin:
      number: "${sub_test_button}"
      inverted: true
      mode:
        input: true
    on_press:
      then:
        - logger.log: "Button Pressed"
        - deep_sleep.prevent: deep_sleep_1
        - delay: 2min
        - deep_sleep.allow: deep_sleep_1

sensor:
  - platform: template
    id: burn_status
    name: "Burn Status"
    icon: mdi:fire
    on_value:
      - if:
          condition:
            - lambda: return id(burn_category).state == 6;
          then:
            - light.turn_on:
                id: burn_status_rgb
                brightness: 25%
                red: 0%
                green: 100%
                blue: 0%
      - if:
          condition:
            - lambda: return id(burn_category).state == 7 || id(burn_category).state == 8;
          then:
            - light.turn_on:
                id: burn_status_rgb
                brightness: 25%
                red: 100%
                green: 50%
                blue: 0%
      - if:
          condition:
            - lambda: return id(burn_category).state == 9;
          then:
            - light.turn_on:
                id: burn_status_rgb
                brightness: 25%
                red: 100%
                green: 0%
                blue: 0%
    
light:
  - platform: rgb
    id: burn_status_rgb
    name: "Burn_Status_LEDs"
    red: pwm_red_led
    green: pwm_green_led
    blue: pwm_blue_led
  - platform: monochromatic
    id: user_led
    name: "User LED"
    output: pwm_user_led
    
# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

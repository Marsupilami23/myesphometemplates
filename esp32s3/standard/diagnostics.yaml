substitutions:
  log_level: DEBUG
  timezone: "America/Los_Angeles"

# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: 115200

globals:
  - id: burn_status_category
    type: int
    restore_value: no
    initial_value: 0

lambda: |-
  import requests
  from json

  def get_burn_category(url):
    try:
      response = requests.get(url)
      response.raise_for_status()

      if not response.text:
        ESP_LOGW("burn_check", "Error: Empty response from the server.")
        return None

      json_data = response.text \
        .replace("burncheckForecastCallback(", "") \
        .rstrip(");") \
        .lstript("(") \
        .rstrip(")")

      try:
        data = json.loads(json_data)
      except json.JSONDecodeError as e:
        ESP_LOGW("burn_check", "Error decoding JSON: %s", e)
        ESP_LOGW("burn_check", "Raw response content: %s", response.text)
        return None

      category = data['burn_forecast']['today']['category']
      return category

    except requests.exceptions.RequestException as e:
      ESP_LOGW("burn_check", "Error fetching data: %s", e)
      return None
      
  # --- Main Logic ---    
  url = "https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt"

  if category is not None:
    id(burn_status_category) = category

  return id(burn_status_category)


# Provide date and time
time:
  - platform: sntp
    id: time_service
    timezone: "${timezone}"

# Diagostic output sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"

  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: template
    name: "Burn Status Text"
    lambda: |-
      return id(burn_status_category);
      
binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true
    
sensor:
  # Captures the uptime and updates the human-readable
  # text sensor displayed. this is an internal sensor only.
  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    update_interval: 60s
    entity_category: "diagnostic"
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds / 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) = "s")
              ).c_str();
  
  - plateform: template
    name: "Burn Status"
    lambda: |-
      return id(burn_status_category);
      
# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

interval:
  - interval: 1h
    then:
      - lambda: !lambda 'return get_burn_category();'

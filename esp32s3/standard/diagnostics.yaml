substitutions:
  log_level: DEBUG
  sub_baud_rate: "115200"
  
globals:
  - id: burn_category
    type: int
    restore_value: true
    initial_value: "0"
    
# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: "${sub_baud_rate}"

http_request:
  id: burn_check_request
  verify_ssl: false

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: 8
        hours: 9
        then:
          - lambda: |-
              id(wifi_brg95758).start();

binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

  - platform: gpio
    id: test_button
    name: Test Button
    pin:
      number: "${sub_test_button}"
      inverted: true
      allow_other_uses: true
      mode:
        input: true
#    on_press:
#      then:
#        - lambda: |-
#            ESP_LOGI("deep_sleep", "Wake button was pressed, preventing deep_sleep for 2 minutes");
#            delay(120000);
#            id(deep_sleep_1).allow_deep_sleep();

text_sensor:
  - platform: template
    id: burn_status
    name: "Burn Status"
    icon: mdi:fire
    lambda: |-
      auto burn_cat = id(burn_category);
      std::string burn_status_text = "Unknown";
      
      if (burn_cat == 6) {
        burn_status_text = "Burning Allowed";
      } else if (burn_cat == 7 || burn_cat == 8) {
        burn_status_text = "Burning Discouraged or Burning Prohibited with exceptions";
      } else if (burn_cat == 9) {
        burn_status_text = "Burning Prohibited, no exceptions!";
      }
      id(burn_status).publish_state(burn_status_text);
      return {};
    
light:
  - platform: monochromatic
    id: user_led
    name: "User LED"
    output: pwm_user_led
  - platform: rgb
    id: burn_status_rgb
    name: "Burn_Status_LEDs"
    red: pwm_red_led
    green: pwm_green_led
    blue: pwm_blue_led

sensor:
  - platform: template
    id: burn_status_sensor
    name: "Burn Status Category"
    icon: "mdi:fire"
    lambda: |-
      auto burn_cat = id(burn_category);
      auto call = id(burn_status_rgb).make_call();

      call.set_state(true);

      if (burn_cat == 6) {
        call.set_red(0.0f);
        call.set_green(1.0f);
        call.set_blue(0.0f);
      } else if (burn_cat == 7 || burn_cat == 8) {
        call.set_red(0.0f);
        call.set_green(1.0f);
        call.set_blue(1.0f);
      } else if (burn_cat == 9) {
        call.set_red(1.0f);
        call.set_green(0.0f);
        call.set_blue(0.0f);
      } else {
      call.set_state(false);
      }
      call.perform();
      id(burn_status_sensor).publish_state(burn_cat);
      return {};
          
# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

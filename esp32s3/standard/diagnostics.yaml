substitutions:
  log_level: DEBUG

globals:
  - id: burn_category
    type: int
    restore_value: true
    initial_value: "0"
    
# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: 115200
  
http_request:
  id: burn_check_request
  verify_ssl: false

time:
  - platform: homeassistant
    id: homeassistant_time

#deep_sleep:
#  id: deep_sleep_1

binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

  - platform: gpio
    id: test_button
    name: Test Button
    pin:
      number: "${sub_test_button}"
      inverted: true
      mode:
        input: true
    on_press:
      then:
        - logger.log: "Button Pressed"
#        - deep_sleep.prevent: deep_sleep_1
#        - delay: 2min
#        - deep_sleep.allow: deep_sleep_1

text_sensor:
  - platform: template
    id: burn_status
    name: "Burn Status"
    icon: mdi:fire
    lambda: |-
      auto burn_cat = id(burn_category);
      std::string burn_status_text = "Unknown";
      
      if (burn_cat == 6) {
        burn_status_text = "Burning Allowed";
      } else if (burn_cat == 7 || burn_cat == 8) {
        burn_status_text = "Burning Discouraged or Burning Prohibited with exceptions";
      } else if (burn_cat == 9) {
        burn_status_text = "Burning Prohibited, no exceptions!";
      }
      id(burn_status).publish_state(burn_status_text);
      return {};
    
light:
  - platform: monochromatic
    id: user_led
    name: "User LED"
    output: pwm_user_led
  - platform: rgb
    id: burn_status_rgb
    name: "Burn_Status_LEDs"
    red: pwm_red_led
    green: pwm_green_led
    blue: pwm_blue_led
    effects:
      - lambda:
          name: "Burn Status Light"
          lambda: |-
            auto burn_cat = id(burn_category);
            auto call = id(burn_status_rgb).turn_on();
            call.set_transition_length(1000);
            call.set_brightness(.50);
            call.set_color_mode(ColorMode::RGB);
      
            if (burn_cat == 6) {
              call.set_rgb(0.0, 1.0, 0.0);
              call.perform();
            } else if (burn_cat == 7 || burn_cat == 8) {
              call.set_rgb(1.0, 0.5, 0.0);
              call.perform();
            } else if (burn_cat == 9) {
              call.set_rgb(1.0, 0.0, 0.0);
              call.perform();
            }
            return {};
    
# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"


substitutions:
  log_level: DEBUG

# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: 115200
  
http_request:
  id: burn_check_request
  verify_ssl: false

time:
  - platform: homeassistant
    on_time:
      - minutes: /5
        then:
          - http_request.get:
              id: burn_check_request
              url: https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt
              capture_response: true
              on_response:
                then:
                  - if:
                      condition:
                        lambda: return response->status_code == 200;
                      then:
                        - logger.log:
                            format: "Raw Response %s"
                            args: [body.c_str()]
                        - lambda: |-
                            // Remove "burncheckForecastCallback(" and ")" from the response
                            std::string cleaned_body = body;
                            cleaned_body = cleaned_body.erase(0, strlen("burncheckForecastCallback("));
                            cleaned_body = cleaned_body.erase(cleaned_body.size() - 1);
                            
                            json::parse_json(cleaned_body, [](JsonObject root) -> bool {
                              if (root["burn_forecast"]["today"]["category"].as<int>()) {
                                id(burn_status).publish_state(root["burn_forecast"]["today"]["category"].as<int>());
                                return true;
                              } else {
                                ESP_LOGD("burn_category", "No burn status found!");
                                return false;
                              }
                              });
                      else:
                        - logger.log:
                            format: "Error: Sometimg went wrong!"


binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

sensor:
  - platform: template
    id: burn_status
    name: "Burn Status"
    icon: mdi:fire
    on_value:
      - lambda: |-
          if (id(burn_status).state == 6) {
            auto call = id(burn_status_rgb).turn_on();
            call.set_color_mode(ColorMode::RGB);
            call.set_rgb(0.0, 1.0, 0.0); // Green
            call.perform();
          }
          if (id(burn_status).state == 7 || id(burn_status).state == 8) {
            auto call = id(burn_status_rgb).turn_on();
            call.set_color_mode(ColorMode::RGB);
            call.set_rgb(1.0, .30, 0.0); // Yellow
            call.perform();
          }
          if (id(burn_status).state == 9) {
            auto call = id(burn_status_rgb).turn_on();
            call.set_color_mode(ColorMode::RGB);
            call.set_rgb(1.0, 0.0, 0.0); // Red
            call.perform();
          }

# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

substitutions:
  log_level: DEBUG
  timezone: "America/Los_Angeles"

# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: 115200

globals:
  - id: burn_status_category
    type: int
    restore_value: no
    initial_value: '0'

# Diagostic output sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"

  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true

binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true
    
http_request:
  useragent: esphome/esp32dev
  id: http_request_data
  verify_ssl: false

time:
  - platform: sntp
    id: sntp_time
    timezone: "${timezone}"
    on_time:
      - seconds: 0
        minutes: 0
        hours: /1
        then:
          - http_request.get:
              url: "https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt"
              headers:
                Content-Type: application/json
              on_response:
                then:
                  lambda: |-
                    # Fixed-size buffer (adjust as needed, might not be enough!)
                    const int buffer_size = 1024;
                    char response_buffer[buffer_size];
            
                    # Get the response (might truncate large responses)
                    int http_code = id(burn_category_sensor).http_code();
                    size_t response_size = id(burn_category_sensor).http_size();
                    if (http_code == 200 && response_size < buffer_size) {
                      response_size = id(burn_category_sensor).http_read_all(response_buffer, buffer_size);
            
                      // Attempt to parse JSON (limited functionality)
                      JsonObject root = json.parse_object(response_buffer);
                      if (root.has("burn_forecast") && root["burn_forecast"].is_object()) {
                        JsonObject burn_forecast = root["burn_forecast"];
                        if (burn_forecast.has("today") && burn_forecast["today"].is_object()) {
                          JsonObject today = burn_forecast["today"];
                          if (today.has("category") && today["category"].is_number()) {
                            int category = today["category"];
                            id(burn_category_sensor).publish_state(category);
                          } else {
                            logger.error("Failed to find 'category' in 'today' object");
                          }
                        } else {
                          logger.error("Failed to find 'today' object in 'burn_forecast'";
                        }
                      } else {
                        logger.error("Failed to find 'burn_forecast' object in JSON");
                      }
                    } else {
                      logger.error(F("HTTP request failed, code: {http_code}"));
                    }

sensor:
  # Captures the uptime and updates the human-readable
  # text sensor displayed. this is an internal sensor only.
  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    update_interval: 60s
    entity_category: "diagnostic"
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds / 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) = "s")
              ).c_str();
  
  - platform: template
    name: "Burn Status"
    lambda: |-
      return id(burn_status_category);
      
# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

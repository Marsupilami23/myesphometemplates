substitutions:
  log_level: DEBUG
  timezone: "America/Los_Angeles"

# Enable logging bia network and disable serial port
logger:
  level: "${log_level}"
  baud_rate: 115200

globals:
  - id: burn_status_category
    type: int
    restore_value: no
    initial_value: '0'

# Diagostic output sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"

  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: template
    name: "Today's Burn Status"
    id: todays_burn_category
    lambda: |-
      if (id(burncheck_forecast).has_value()) {
        return String(id(burncheck_forecast).state["burn_forecast"]["today"]["category"].as<int>());
      } else {
        return "Unknown";
      }

binary_sensor:
  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true
    
http_request:
  useragent: esphome/2024.11.0
  id: http_request_data
  verify_ssl: false

time:
  - platform: homeassistant
    on_time:
      - minutes: 0
        then:
          - http_request.update: burncheck_forecast

             
sensor:
  # Captures the uptime and updates the human-readable
  # text sensor displayed. this is an internal sensor only.
  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    update_interval: 60s
    entity_category: "diagnostic"
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds / 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) = "s")
              ).c_str();
  
  - platform: http_request
    name: "Burncheck Forecast"
    id: burncheck_forecast
    url: "https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt"
    user_agent: "ESPHome-BurncheckForecast"
    json_rest_of_document:
      burn_forecast:
        today:
          category: int
         
# Provide a pre-built button for restart the device
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

# https://esphome.io/components/esphome.html
esphome:
  name: "${sub_name}"
  friendly_name: "${sub_friendly_name}"
  name_add_mac_suffix: false
  min_version: "2024.12.2"
  on_boot:
    priority: -100
    then:
      - lambda: |-
            #include <HTTPClient.h>
            #include <LwIPClient.h>
            const char serverAddress[] = "sonomatech-production.s3.amazonaws.com";
            String path = "/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt";
            int port = 443;
            HTTPClient http;
            LwIPClient client;
            String url = "http://" + String(serverAddress) + ":" + String(port) + path;
            http.begin(url);
            String responseBody;
            responseBody += char(client.read());
                        
            // Remove "burncheckForecastCallback(" and ")" from the response
            String cleanedBody = responseBody;
            cleanedBody.remove(0, strlen("burncheckForecastCallback("));
            cleanedBody.remove(cleanedBody.length() - 1);
            
            json::parse_json(cleaned_body, [](JsonObject root) -> bool {
              if (root.containsKey("burn_forecast") &&
                  root["burn_forecast"].containsKey("today") &&
                  root["burn_forecast"]["today"].containsKey("category") &&
                  root["burn_forecast"]["today"]["category"].is<int>()) {
                  
                 id(burn_category) = (root["burn_forecast"]["today"]["category"].as<int>());
                 return true;
              } else {
                ESP_LOGD("burn_category", "No burn status found!");
                return false;
              }
              });

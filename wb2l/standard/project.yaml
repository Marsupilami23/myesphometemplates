# https://esphome.io/components/esphome.html
esphome:
  name: "${sub_name}"
  friendly_name: "${sub_friendly_name}"
  name_add_mac_suffix: false
  min_version: "2024.12.2"
  libraries:
    - amcewen/HttpClient@^2.2.0
  on_boot:
    priority: -100
    then:
       - lambda: |-
          #include <HttpClient.h>
          HttpClient http;
          const char kHostname[] = "sonomatech-production.s3.amazonaws.com";
          const char kPath[] = "/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt";
          http.get(serverName, URLPath);
          http.stop();
          
#          #include <WiFiClientSecure.h>
#          const char serverAddress[] = "sonomatech-production.s3.amazonaws.com";
#          String path = "/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt";
#          int port = 443; // Use 80 for HTTP
#
#          WiFiClientSecure client;
#          client.setInsecure();
#          HTTPClient http;
#          String url = "http://" + String(serverAddress) + ":" + String(port) + path;
#          http.begin(client, url); 
#          int httpCode = http.GET();
#
#          if (httpCode > 0) {
#            if (httpCode == HTTP_CODE_OK) {
#              String responseBody;
#              while (client.available()) {
#                responseBody += char(client.read()); 
#              }
#
#              // Remove "burncheckForecastCallback(" and ")" from the response
#              String cleanedBody = responseBody;
#              cleanedBody.remove(0, strlen("burncheckForecastCallback("));
#              cleanedBody.remove(cleanedBody.length() - 1);
#
#              // Parse the JSON response
#              DynamicJsonDocument doc(1024); // Adjust capacity if needed
#              DeserializationError error = deserializeJson(doc, cleanedBody);
#
#              if (error) {
#                ESP_LOGD("burn_category", "deserializeJson() failed: %s", error.c_str());
#                id(burn_category) = -1; // Set error state
#                return;
#              }
#
#              // Access and store the burn category
#              int burnCategory = doc["burn_forecast"]["today"]["category"].as<int>(); // Access within the lambda
#              id(burn_category) = burnCategory; // Assign to your ESPHome sensor
#
#            } else {
#              ESP_LOGD("burn_category", "HTTP request failed with code: %d", httpCode);
#              id(burn_category) = -1;
#            }
#          } else {
#            ESP_LOGD("burn_category", "Failed to connect to server");
#            id(burn_category) = -1;
#          }
#
#          http.end(); 

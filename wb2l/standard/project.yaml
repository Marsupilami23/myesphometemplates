# https://esphome.io/components/esphome.html
esphome:
  name: "${sub_name}"
  friendly_name: "${sub_friendly_name}"
  name_add_mac_suffix: false
  min_version: "2024.11.0"
  
  on_boot:
    priority: -100
    then:
      - http_request.get:
          id: burn_check_request
          url: https://sonomatech-production.s3.amazonaws.com/sacramento/airquality_org/cbyb-widget/burncheckForecast.txt
          capture_response: true
          on_response:
            then:
              - if:
                  condition:
                    lambda: return response->status_code == 200;
                  then:
                    - logger.log:
                        format: "Raw Response %s"
                        args: [body.c_str()]
                    - lambda: |-
                        // Remove "burncheckForecastCallback(" and ")" from the response
                        std::string cleaned_body = body;
                        cleaned_body = cleaned_body.erase(0, strlen("burncheckForecastCallback("));
                        cleaned_body = cleaned_body.erase(cleaned_body.size() - 1);
                        
                        json::parse_json(cleaned_body, [](JsonObject root) -> bool {
                          if (root.containsKey("burn_forecast") &&
                              root["burn_forecast"].containsKey("today") &&
                              root["burn_forecast"]["today"].containsKey("category") &&
                              root["burn_forecast"]["today"]["category"].is<int>()) {
                              
                             id(burn_category) = (root["burn_forecast"]["today"]["category"].as<int>());
                             return true;
                          } else {
                            ESP_LOGD("burn_category", "No burn status found!");
                            return false;
                          }
                          });

external_components:
  - source:
      type: git
      url: https://github.com/libretiny-eu/libretiny-esphome
      ref: dev
    components: [  "http_request", "json" ]
    refresh: always
